
.START
    LDX #NUM_NODES
    LDY #0

INIT_DISTANCES:
    LDA #255
    STA DISTANCES,Y
    INY
    DEX
    BNE INIT_DISTANCES

    LDA #0
    STA START_NODE
    JSR CALCULATE_DISTANCES

    ; Output the shortest path
    LDX #NUM_NODES
    LDA #0
    STA SHORTEST_PATH+1,X

FIND_SHORTEST_PATH:
    LDX #NUM_NODES
    DEY
    BMI FINISH

CALCULATE_DISTANCES:
    ; Calculate distances to neighbors
    LDX #NUM_NODES
    LDA DISTANCES,Y
    BEQ NEXT_NODE

    ; Update distances if shorter path found
    LDA #0
    STA SHORT_NODE
    LDA #255
    STA MIN_DISTANCE

FIND_NEIGHBORS:
    LDX DISTANCES,Y
    LDY DISTANCES,X
    BEQ NEXT_NEIGHBOR

    LDA DISTANCES,Y
    CMP MIN_DISTANCE
    BCC UPDATE_DISTANCE

NEXT_NEIGHBOR:
    INY
    DEX
    BNE FIND_NEIGHBORS

UPDATE_DISTANCE:
    STA MIN_DISTANCE
    STA SHORT_NODE
    LDA DISTANCES,X
    CLC
    ADC MIN_DISTANCE
    STA DISTANCES,Y

NEXT_NODE:
    DEY
    BPL CALCULATE_DISTANCES

FINISH:
    ; Halt the program
    BRK

NUM_NODES .BYTE 5
START_NODE .BYTE 0
DISTANCES .BLOCK NUM_NODES
SHORT_NODE .BYTE 0
MIN_DISTANCE .BYTE 0
SHORTEST_PATH .BLOCK NUM_NODES

.END
