
START LDA NUMBER
    STA ORIGINAL_NUM
    
    ; Find the number of digits in the original number
    LDX #0
COUNT_DIGITS INC X
    LSR
    BCC COUNT_DIGITS
    
    STA NUM_DIGITS
    
    ; Initialize variables
    LDX #0
    STX MULTIPLIER
    STX FACTOR1
    STX FACTOR2
    
DIVIDE_LOOP LDA ORIGINAL_NUM
    LSR
    STA ORIGINAL_NUM
    LDX MULTIPLIER
    INX
    STX MULTIPLIER
    
    CPX NUM_DIGITS
    BMI DIVIDE_DONE
    
    LDA MULTIPLIER
    STA TEMP
    
    CLC
    LDA ORIGINAL_NUM
    BCC SKIP_ZERO
    
    LDA DIVISOR
    BPL SKIP_ZERO
    CMP #0
    BEQ ZERO
    
SKIP_ZERO SEC
    
    SBC #1
    
    LSR
    BCC SKIP4
    LDA DIVISOR
    ADC #10
    SEC
    SBC #10
    
SKIP4 CMP #0
    BCC SKIP3
    DEC MULTIPLIER
    LDA MULTIPLIER
    CMP #$FF
    
    BNE DIVIDE_LOOP
    BCC DIVIDE_DONE
    
SKIP3 LSR
    DEC FACTOR1
    BNE DIVIDE_LOOP
    
    LDX #0
    STX FACTOR1
    
    ; Check if the factors form a vampire number
    LDA FACTOR1
    STA CHECK_NUM
    
COMPARE_FACTORS LDA FACTOR1
    MUL FACTOR2
    STA CHECK_NUM
    
    LDA CHECK_NUM
    CMP ORIGINAL_NUM
    BEQ VAMPIRE_NUMBER
    
    INC FACTOR2
    CMP MULTIPLIER
    BNE COMPARE_FACTORS
    
    INC FACTOR1
    CMP MULTIPLIER
    BNE DIVIDE_LOOP
    
    ; Output result
VAMPIRE_NUMBER LDA #VAMPIRE_MESSAGE
    JSR PUT_MESSAGE
    
    JMP END
    
; Constants
ZERO    EQU 0
ONE     EQU 1
TEN     EQU 10
END     RTS
VAMPIRE_MESSAGE .ASC "The number is a vampire number."
NOT_VAMPIRE_MESSAGE .ASC "The number is not a vampire number."

; Input number
NUMBER  .BYTE 1260
TEMP    .BYTE 0
ORIGINAL_NUM    .BYTE 0
NUM_DIGITS  .BYTE 0
DIVISOR .BYTE 100
MULTIPLIER  .BYTE 0
FACTOR1 .BYTE 0
FACTOR2 .BYTE 0
CHECK_NUM   .WORD 0

; Subroutine to put a message on the screen
PUT_MESSAGE    STA $D020
    LDA #10
    STA $D021
    LDX #0
PUT_MESSAGE_LOOP LDA VAMPIRE_MESSAGE,X
    BEQ END_PUT_MESSAGE
    STA $0400,X
    INX
    JMP PUT_MESSAGE_LOOP
END_PUT_MESSAGE RTS
